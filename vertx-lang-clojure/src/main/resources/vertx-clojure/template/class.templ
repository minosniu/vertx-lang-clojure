(ns @{type.raw.translatePackageName("clojure")}.@{type.raw.getSimpleName(CASE_KEBAB)})\n
@code{
  /*clojure does not allow different functions with the same name, thus combine the functions with the same name first
  use their name as map key, methods as value list*/
  import java.util.TreeMap;
  import java.util.HashMap;
  import java.util.TreeSet;
  import java.util.ArrayList;
  /*using tree map & set here only because we need to keep the order in source files*/
  var methodsMap = new TreeMap();
  var paramsMap = new HashMap();
  var importClassSet = new TreeSet();
  foreach (method : methods) {
    if(methodsMap[method.name] == null){
      methodsMap[method.name] = [method];
      var params = new ArrayList();
      for(param:method.params){
        params.add(param.name);
      }
      paramsMap[method.name +"-"+params.size()] = params;
    }else{
      /*Can't have 2 overloads with same arity, the method with same name and params numbers will be combined
        e.g. (req [uri] ...)& (req [options] ...) -> (req [uri-or-options] ...)*/
      var thereIsAnExistingMethodWithSameParameterNumber = false;

      if(paramsMap[method.name+"-"+method.params.size()] != null){
        thereIsAnExistingMethodWithSameParameterNumber = true;

        var list = new ArrayList();

        var paramNames = paramsMap[method.name+"-"+method.params.size()];
        var params = method.params;
        /*combine parameters' name e.g. option-or-request-uri*/
        for(int j=0;j<params.size();j++){
          if(!paramNames.get(j).contains(params.get(j).name)){
            list.add(params.get(j).name + "-or-"+ paramNames.get(j));
          }else{
            list.add(paramNames.get(j));
          }
        }

        paramsMap[method.name+"-"+method.params.size()] = list;
      }

      if(!thereIsAnExistingMethodWithSameParameterNumber){
        methodsMap[method.name].add(method);
        var params = new ArrayList();
        for(param:method.params){
          params.add(param.name);
        }
        paramsMap[method.name+"-"+params.size()] = params;
      }
    }
    /*for import statements*/
    foreach(param:method.params){
      if(param.type.getName().startsWith("io.vertx.")||param.type.getName().startsWith("java.util.")){
        importClassSet.add(param.type.raw.name)
      }
    }
  }
  /*import corresponding java class*/
  importClassSet.add(type.raw.name);
}

@foreach{clazz:importClassSet}
\n(import @{clazz})
@end{}
\n

@code{
var handlerIsDefined = false;
var functionIsDefined = false;
}

@foreach{methodName:methodsMap.keySet()}

\n(defn @{CASE_KEBAB.format(CASE_CAMEL.parse(methodName))}

@foreach{method:methodsMap[methodName]}\n

@if{method.name == "handler"}@comment{special case for handler & function}
  ([f]
\n    (reify
\n     io.vertx.core.Handler
\n     (handle [this para]
\n           (f para))))
\n
@code{handlerIsDefined = true;}
@else{method.name == "function"}
 [f]
\n  (reify
\n   java.util.function.Function
\n   (apply [this para]
\n           (f para))))
\n
@code{functionIsDefined = true;}
@end{}

  (
@code{var paramsSize = method.params.size()}
@if{method.name == type.raw.getSimpleName()}[@foreach{param:paramsMap[methodName+"-"+paramsSize]}@{CASE_KEBAB.format(CASE_CAMEL.parse(param))}@end{' '}] (
new @{type.raw.getSimpleName(CASE_KEBAB)}(@foreach{param:paramsMap[methodName+"-"+paramsSize]}@{CASE_KEBAB.format(CASE_CAMEL.parse(param))}@end{' '}
)
@else{method.staticMethod}[@foreach{param:paramsMap[methodName+"-"+paramsSize]}@{CASE_KEBAB.format(CASE_CAMEL.parse(param))}@end{' '}] (
@{type.raw.getSimpleName}/@{method.name}@if{paramsSize>0} @end{}@foreach{param:paramsMap[methodName+"-"+paramsSize]}@{CASE_KEBAB.format(CASE_CAMEL.parse(param))}@end{' '}
)
@else{}
[@{type.raw.getSimpleName(CASE_KEBAB)}@if{paramsSize>0} @end{}@foreach{param:paramsMap[methodName+"-"+paramsSize]}@{CASE_KEBAB.format(CASE_CAMEL.parse(param))}@end{' '}] (
.@{method.name} @{type.raw.getSimpleName(CASE_KEBAB)}@if{paramsSize>0} @end{}@foreach{param:paramsMap[methodName+"-"+paramsSize]}@{CASE_KEBAB.format(CASE_CAMEL.parse(param))}@end{' '}
)
@end{})
@end{})
@end{}

@if{!handlerIsDefined}
@foreach{name:importClassSet}
@if{name == "io.vertx.core.Handler"}
\n(defn handler [f]
\n  (reify
\n   io.vertx.core.Handler
\n   (handle [this para]
\n           (f para))))
@end{}
@end{}
@end{}

@if{!functionIsDefined}
@foreach{name:importClassSet}
@if{name == "java.util.function.Function"}
\n(defn function [f]
\n  (reify
\n   java.util.function.Function
\n   (apply [this para]
\n           (f para))))
@end{}
@end{}
@end{}
