(ns @{type.raw.translatePackageName("clojure")}.@{type.raw.getSimpleName(CASE_KEBAB)})\n
@code{
  var className = type.raw.getSimpleName();
  var objName = className.substring(0,1).toLowerCase() + className.substring(1);

  var classKeBabName = CASE_KEBAB.format(CASE_CAMEL.parse(className));
  var objKeBabName = CASE_KEBAB.format(CASE_CAMEL.parse(objName));
}

\n(import @{type.raw})
\n(import io.vertx.core.json.JsonObject)
\n
\n(defn new-instance
@if{hasEmptyConstructor}\n  ([] (new @{type.raw.getSimpleName()}))@end{}
\n  ([^JsonObject json] (new @{type.raw.getSimpleName()} json)))
\n
@foreach{property:properties}

@code{var propertyKebabName = CASE_KEBAB.format(CASE_CAMEL.parse(property.name));}

@if{property.getAdderMethod()!=null}
@code{var method = property.getAdderMethod()}
@if{property.kind.name == "MAP"}
\n(defn @{CASE_KEBAB.format(CASE_CAMEL.parse(method))} [^@{className} @{objKeBabName} key value] (.@{method} @{objKeBabName} key value))
@else{}
\n(defn @{CASE_KEBAB.format(CASE_CAMEL.parse(method))} [^@{className} @{objKeBabName} @{propertyKebabName}] (.@{method} @{objKeBabName} @{propertyKebabName}))
@end{}
@end{}

@if{property.getSetterMethod()!=null}
@code{var method = property.getSetterMethod()}
\n(defn @{CASE_KEBAB.format(CASE_CAMEL.parse(method))} [^@{className} @{objKeBabName} @{propertyKebabName}] (.@{method} @{objKeBabName} @{propertyKebabName}))
@end{}

@if{property.getGetterMethod()!=null}
@code{var method = property.getGetterMethod()}
\n(defn @{CASE_KEBAB.format(CASE_CAMEL.parse(method))} [^@{className} @{objKeBabName}] (.@{method} @{objKeBabName}))
@end{}

@end{}

@if{hasToJsonMethod}
\n(defn to-json [^@{className} @{objKeBabName}] (.toJson @{objKeBabName}))
@end{}
