(ns io.vertx.clojure.core.net.net-client-options)

(import io.vertx.core.net.NetClientOptions)
(import io.vertx.core.json.JsonObject)

(defn new-instance
  ([] (new NetClientOptions))
  ([^JsonObject json] (new NetClientOptions json)))

(defn set-connect-timeout [^NetClientOptions net-client-options connect-timeout] (.setConnectTimeout net-client-options connect-timeout))
(defn get-connect-timeout [^NetClientOptions net-client-options] (.getConnectTimeout net-client-options))
(defn add-crl-path [^NetClientOptions net-client-options crl-paths] (.addCrlPath net-client-options crl-paths))
(defn get-crl-paths [^NetClientOptions net-client-options] (.getCrlPaths net-client-options))
(defn add-crl-value [^NetClientOptions net-client-options crl-values] (.addCrlValue net-client-options crl-values))
(defn get-crl-values [^NetClientOptions net-client-options] (.getCrlValues net-client-options))
(defn add-enabled-cipher-suite [^NetClientOptions net-client-options enabled-cipher-suites] (.addEnabledCipherSuite net-client-options enabled-cipher-suites))
(defn get-enabled-cipher-suites [^NetClientOptions net-client-options] (.getEnabledCipherSuites net-client-options))
(defn add-enabled-secure-transport-protocol [^NetClientOptions net-client-options enabled-secure-transport-protocols] (.addEnabledSecureTransportProtocol net-client-options enabled-secure-transport-protocols))
(defn set-enabled-secure-transport-protocols [^NetClientOptions net-client-options enabled-secure-transport-protocols] (.setEnabledSecureTransportProtocols net-client-options enabled-secure-transport-protocols))
(defn get-enabled-secure-transport-protocols [^NetClientOptions net-client-options] (.getEnabledSecureTransportProtocols net-client-options))
(defn set-hostname-verification-algorithm [^NetClientOptions net-client-options hostname-verification-algorithm] (.setHostnameVerificationAlgorithm net-client-options hostname-verification-algorithm))
(defn get-hostname-verification-algorithm [^NetClientOptions net-client-options] (.getHostnameVerificationAlgorithm net-client-options))
(defn set-idle-timeout [^NetClientOptions net-client-options idle-timeout] (.setIdleTimeout net-client-options idle-timeout))
(defn get-idle-timeout [^NetClientOptions net-client-options] (.getIdleTimeout net-client-options))
(defn set-idle-timeout-unit [^NetClientOptions net-client-options idle-timeout-unit] (.setIdleTimeoutUnit net-client-options idle-timeout-unit))
(defn get-idle-timeout-unit [^NetClientOptions net-client-options] (.getIdleTimeoutUnit net-client-options))
(defn set-jdk-ssl-engine-options [^NetClientOptions net-client-options jdk-ssl-engine-options] (.setJdkSslEngineOptions net-client-options jdk-ssl-engine-options))
(defn get-jdk-ssl-engine-options [^NetClientOptions net-client-options] (.getJdkSslEngineOptions net-client-options))
(defn set-key-store-options [^NetClientOptions net-client-options key-store-options] (.setKeyStoreOptions net-client-options key-store-options))
(defn get-key-store-options [^NetClientOptions net-client-options] (.getKeyStoreOptions net-client-options))
(defn set-local-address [^NetClientOptions net-client-options local-address] (.setLocalAddress net-client-options local-address))
(defn get-local-address [^NetClientOptions net-client-options] (.getLocalAddress net-client-options))
(defn set-log-activity [^NetClientOptions net-client-options log-activity] (.setLogActivity net-client-options log-activity))
(defn get-log-activity [^NetClientOptions net-client-options] (.getLogActivity net-client-options))
(defn set-metrics-name [^NetClientOptions net-client-options metrics-name] (.setMetricsName net-client-options metrics-name))
(defn get-metrics-name [^NetClientOptions net-client-options] (.getMetricsName net-client-options))
(defn set-open-ssl-engine-options [^NetClientOptions net-client-options open-ssl-engine-options] (.setOpenSslEngineOptions net-client-options open-ssl-engine-options))
(defn get-open-ssl-engine-options [^NetClientOptions net-client-options] (.getOpenSslEngineOptions net-client-options))
(defn set-pem-key-cert-options [^NetClientOptions net-client-options pem-key-cert-options] (.setPemKeyCertOptions net-client-options pem-key-cert-options))
(defn get-pem-key-cert-options [^NetClientOptions net-client-options] (.getPemKeyCertOptions net-client-options))
(defn set-pem-trust-options [^NetClientOptions net-client-options pem-trust-options] (.setPemTrustOptions net-client-options pem-trust-options))
(defn get-pem-trust-options [^NetClientOptions net-client-options] (.getPemTrustOptions net-client-options))
(defn set-pfx-key-cert-options [^NetClientOptions net-client-options pfx-key-cert-options] (.setPfxKeyCertOptions net-client-options pfx-key-cert-options))
(defn get-pfx-key-cert-options [^NetClientOptions net-client-options] (.getPfxKeyCertOptions net-client-options))
(defn set-pfx-trust-options [^NetClientOptions net-client-options pfx-trust-options] (.setPfxTrustOptions net-client-options pfx-trust-options))
(defn get-pfx-trust-options [^NetClientOptions net-client-options] (.getPfxTrustOptions net-client-options))
(defn set-proxy-options [^NetClientOptions net-client-options proxy-options] (.setProxyOptions net-client-options proxy-options))
(defn get-proxy-options [^NetClientOptions net-client-options] (.getProxyOptions net-client-options))
(defn set-receive-buffer-size [^NetClientOptions net-client-options receive-buffer-size] (.setReceiveBufferSize net-client-options receive-buffer-size))
(defn get-receive-buffer-size [^NetClientOptions net-client-options] (.getReceiveBufferSize net-client-options))
(defn set-reconnect-attempts [^NetClientOptions net-client-options reconnect-attempts] (.setReconnectAttempts net-client-options reconnect-attempts))
(defn get-reconnect-attempts [^NetClientOptions net-client-options] (.getReconnectAttempts net-client-options))
(defn set-reconnect-interval [^NetClientOptions net-client-options reconnect-interval] (.setReconnectInterval net-client-options reconnect-interval))
(defn get-reconnect-interval [^NetClientOptions net-client-options] (.getReconnectInterval net-client-options))
(defn set-reuse-address [^NetClientOptions net-client-options reuse-address] (.setReuseAddress net-client-options reuse-address))
(defn is-reuse-address [^NetClientOptions net-client-options] (.isReuseAddress net-client-options))
(defn set-reuse-port [^NetClientOptions net-client-options reuse-port] (.setReusePort net-client-options reuse-port))
(defn is-reuse-port [^NetClientOptions net-client-options] (.isReusePort net-client-options))
(defn set-send-buffer-size [^NetClientOptions net-client-options send-buffer-size] (.setSendBufferSize net-client-options send-buffer-size))
(defn get-send-buffer-size [^NetClientOptions net-client-options] (.getSendBufferSize net-client-options))
(defn set-so-linger [^NetClientOptions net-client-options so-linger] (.setSoLinger net-client-options so-linger))
(defn get-so-linger [^NetClientOptions net-client-options] (.getSoLinger net-client-options))
(defn set-ssl [^NetClientOptions net-client-options ssl] (.setSsl net-client-options ssl))
(defn is-ssl [^NetClientOptions net-client-options] (.isSsl net-client-options))
(defn set-ssl-handshake-timeout [^NetClientOptions net-client-options ssl-handshake-timeout] (.setSslHandshakeTimeout net-client-options ssl-handshake-timeout))
(defn get-ssl-handshake-timeout [^NetClientOptions net-client-options] (.getSslHandshakeTimeout net-client-options))
(defn set-ssl-handshake-timeout-unit [^NetClientOptions net-client-options ssl-handshake-timeout-unit] (.setSslHandshakeTimeoutUnit net-client-options ssl-handshake-timeout-unit))
(defn get-ssl-handshake-timeout-unit [^NetClientOptions net-client-options] (.getSslHandshakeTimeoutUnit net-client-options))
(defn set-tcp-cork [^NetClientOptions net-client-options tcp-cork] (.setTcpCork net-client-options tcp-cork))
(defn is-tcp-cork [^NetClientOptions net-client-options] (.isTcpCork net-client-options))
(defn set-tcp-fast-open [^NetClientOptions net-client-options tcp-fast-open] (.setTcpFastOpen net-client-options tcp-fast-open))
(defn is-tcp-fast-open [^NetClientOptions net-client-options] (.isTcpFastOpen net-client-options))
(defn set-tcp-keep-alive [^NetClientOptions net-client-options tcp-keep-alive] (.setTcpKeepAlive net-client-options tcp-keep-alive))
(defn is-tcp-keep-alive [^NetClientOptions net-client-options] (.isTcpKeepAlive net-client-options))
(defn set-tcp-no-delay [^NetClientOptions net-client-options tcp-no-delay] (.setTcpNoDelay net-client-options tcp-no-delay))
(defn is-tcp-no-delay [^NetClientOptions net-client-options] (.isTcpNoDelay net-client-options))
(defn set-tcp-quick-ack [^NetClientOptions net-client-options tcp-quick-ack] (.setTcpQuickAck net-client-options tcp-quick-ack))
(defn is-tcp-quick-ack [^NetClientOptions net-client-options] (.isTcpQuickAck net-client-options))
(defn set-traffic-class [^NetClientOptions net-client-options traffic-class] (.setTrafficClass net-client-options traffic-class))
(defn get-traffic-class [^NetClientOptions net-client-options] (.getTrafficClass net-client-options))
(defn set-trust-all [^NetClientOptions net-client-options trust-all] (.setTrustAll net-client-options trust-all))
(defn is-trust-all [^NetClientOptions net-client-options] (.isTrustAll net-client-options))
(defn set-trust-store-options [^NetClientOptions net-client-options trust-store-options] (.setTrustStoreOptions net-client-options trust-store-options))
(defn get-trust-store-options [^NetClientOptions net-client-options] (.getTrustStoreOptions net-client-options))
(defn set-use-alpn [^NetClientOptions net-client-options use-alpn] (.setUseAlpn net-client-options use-alpn))
(defn is-use-alpn [^NetClientOptions net-client-options] (.isUseAlpn net-client-options))
(defn set-use-pooled-buffers [^NetClientOptions net-client-options use-pooled-buffers] (.setUsePooledBuffers net-client-options use-pooled-buffers))
(defn is-use-pooled-buffers [^NetClientOptions net-client-options] (.isUsePooledBuffers net-client-options))
(defn to-json [^NetClientOptions net-client-options] (.toJson net-client-options))