(ns io.vertx.clojure.core.http.http-client-options)

(import io.vertx.core.http.HttpClientOptions)
(import io.vertx.core.json.JsonObject)

(defn new-instance
  ([] (new HttpClientOptions))
  ([^JsonObject json] (new HttpClientOptions json)))

(defn set-alpn-versions [^HttpClientOptions http-client-options alpn-versions] (.setAlpnVersions http-client-options alpn-versions))
(defn get-alpn-versions [^HttpClientOptions http-client-options] (.getAlpnVersions http-client-options))
(defn set-connect-timeout [^HttpClientOptions http-client-options connect-timeout] (.setConnectTimeout http-client-options connect-timeout))
(defn get-connect-timeout [^HttpClientOptions http-client-options] (.getConnectTimeout http-client-options))
(defn add-crl-path [^HttpClientOptions http-client-options crl-paths] (.addCrlPath http-client-options crl-paths))
(defn get-crl-paths [^HttpClientOptions http-client-options] (.getCrlPaths http-client-options))
(defn add-crl-value [^HttpClientOptions http-client-options crl-values] (.addCrlValue http-client-options crl-values))
(defn get-crl-values [^HttpClientOptions http-client-options] (.getCrlValues http-client-options))
(defn set-decoder-initial-buffer-size [^HttpClientOptions http-client-options decoder-initial-buffer-size] (.setDecoderInitialBufferSize http-client-options decoder-initial-buffer-size))
(defn get-decoder-initial-buffer-size [^HttpClientOptions http-client-options] (.getDecoderInitialBufferSize http-client-options))
(defn set-default-host [^HttpClientOptions http-client-options default-host] (.setDefaultHost http-client-options default-host))
(defn get-default-host [^HttpClientOptions http-client-options] (.getDefaultHost http-client-options))
(defn set-default-port [^HttpClientOptions http-client-options default-port] (.setDefaultPort http-client-options default-port))
(defn get-default-port [^HttpClientOptions http-client-options] (.getDefaultPort http-client-options))
(defn add-enabled-cipher-suite [^HttpClientOptions http-client-options enabled-cipher-suites] (.addEnabledCipherSuite http-client-options enabled-cipher-suites))
(defn get-enabled-cipher-suites [^HttpClientOptions http-client-options] (.getEnabledCipherSuites http-client-options))
(defn add-enabled-secure-transport-protocol [^HttpClientOptions http-client-options enabled-secure-transport-protocols] (.addEnabledSecureTransportProtocol http-client-options enabled-secure-transport-protocols))
(defn set-enabled-secure-transport-protocols [^HttpClientOptions http-client-options enabled-secure-transport-protocols] (.setEnabledSecureTransportProtocols http-client-options enabled-secure-transport-protocols))
(defn get-enabled-secure-transport-protocols [^HttpClientOptions http-client-options] (.getEnabledSecureTransportProtocols http-client-options))
(defn set-force-sni [^HttpClientOptions http-client-options force-sni] (.setForceSni http-client-options force-sni))
(defn is-force-sni [^HttpClientOptions http-client-options] (.isForceSni http-client-options))
(defn set-http2-clear-text-upgrade [^HttpClientOptions http-client-options http2-clear-text-upgrade] (.setHttp2ClearTextUpgrade http-client-options http2-clear-text-upgrade))
(defn is-http2-clear-text-upgrade [^HttpClientOptions http-client-options] (.isHttp2ClearTextUpgrade http-client-options))
(defn set-http2-connection-window-size [^HttpClientOptions http-client-options http2-connection-window-size] (.setHttp2ConnectionWindowSize http-client-options http2-connection-window-size))
(defn get-http2-connection-window-size [^HttpClientOptions http-client-options] (.getHttp2ConnectionWindowSize http-client-options))
(defn set-http2-keep-alive-timeout [^HttpClientOptions http-client-options http2-keep-alive-timeout] (.setHttp2KeepAliveTimeout http-client-options http2-keep-alive-timeout))
(defn get-http2-keep-alive-timeout [^HttpClientOptions http-client-options] (.getHttp2KeepAliveTimeout http-client-options))
(defn set-http2-max-pool-size [^HttpClientOptions http-client-options http2-max-pool-size] (.setHttp2MaxPoolSize http-client-options http2-max-pool-size))
(defn get-http2-max-pool-size [^HttpClientOptions http-client-options] (.getHttp2MaxPoolSize http-client-options))
(defn set-http2-multiplexing-limit [^HttpClientOptions http-client-options http2-multiplexing-limit] (.setHttp2MultiplexingLimit http-client-options http2-multiplexing-limit))
(defn get-http2-multiplexing-limit [^HttpClientOptions http-client-options] (.getHttp2MultiplexingLimit http-client-options))
(defn set-idle-timeout [^HttpClientOptions http-client-options idle-timeout] (.setIdleTimeout http-client-options idle-timeout))
(defn get-idle-timeout [^HttpClientOptions http-client-options] (.getIdleTimeout http-client-options))
(defn set-idle-timeout-unit [^HttpClientOptions http-client-options idle-timeout-unit] (.setIdleTimeoutUnit http-client-options idle-timeout-unit))
(defn get-idle-timeout-unit [^HttpClientOptions http-client-options] (.getIdleTimeoutUnit http-client-options))
(defn set-initial-settings [^HttpClientOptions http-client-options initial-settings] (.setInitialSettings http-client-options initial-settings))
(defn get-initial-settings [^HttpClientOptions http-client-options] (.getInitialSettings http-client-options))
(defn set-jdk-ssl-engine-options [^HttpClientOptions http-client-options jdk-ssl-engine-options] (.setJdkSslEngineOptions http-client-options jdk-ssl-engine-options))
(defn get-jdk-ssl-engine-options [^HttpClientOptions http-client-options] (.getJdkSslEngineOptions http-client-options))
(defn set-keep-alive [^HttpClientOptions http-client-options keep-alive] (.setKeepAlive http-client-options keep-alive))
(defn is-keep-alive [^HttpClientOptions http-client-options] (.isKeepAlive http-client-options))
(defn set-keep-alive-timeout [^HttpClientOptions http-client-options keep-alive-timeout] (.setKeepAliveTimeout http-client-options keep-alive-timeout))
(defn get-keep-alive-timeout [^HttpClientOptions http-client-options] (.getKeepAliveTimeout http-client-options))
(defn set-key-store-options [^HttpClientOptions http-client-options key-store-options] (.setKeyStoreOptions http-client-options key-store-options))
(defn get-key-store-options [^HttpClientOptions http-client-options] (.getKeyStoreOptions http-client-options))
(defn set-local-address [^HttpClientOptions http-client-options local-address] (.setLocalAddress http-client-options local-address))
(defn get-local-address [^HttpClientOptions http-client-options] (.getLocalAddress http-client-options))
(defn set-log-activity [^HttpClientOptions http-client-options log-activity] (.setLogActivity http-client-options log-activity))
(defn get-log-activity [^HttpClientOptions http-client-options] (.getLogActivity http-client-options))
(defn set-max-chunk-size [^HttpClientOptions http-client-options max-chunk-size] (.setMaxChunkSize http-client-options max-chunk-size))
(defn get-max-chunk-size [^HttpClientOptions http-client-options] (.getMaxChunkSize http-client-options))
(defn set-max-header-size [^HttpClientOptions http-client-options max-header-size] (.setMaxHeaderSize http-client-options max-header-size))
(defn get-max-header-size [^HttpClientOptions http-client-options] (.getMaxHeaderSize http-client-options))
(defn set-max-initial-line-length [^HttpClientOptions http-client-options max-initial-line-length] (.setMaxInitialLineLength http-client-options max-initial-line-length))
(defn get-max-initial-line-length [^HttpClientOptions http-client-options] (.getMaxInitialLineLength http-client-options))
(defn set-max-pool-size [^HttpClientOptions http-client-options max-pool-size] (.setMaxPoolSize http-client-options max-pool-size))
(defn get-max-pool-size [^HttpClientOptions http-client-options] (.getMaxPoolSize http-client-options))
(defn set-max-redirects [^HttpClientOptions http-client-options max-redirects] (.setMaxRedirects http-client-options max-redirects))
(defn get-max-redirects [^HttpClientOptions http-client-options] (.getMaxRedirects http-client-options))
(defn set-max-wait-queue-size [^HttpClientOptions http-client-options max-wait-queue-size] (.setMaxWaitQueueSize http-client-options max-wait-queue-size))
(defn get-max-wait-queue-size [^HttpClientOptions http-client-options] (.getMaxWaitQueueSize http-client-options))
(defn set-max-websocket-frame-size [^HttpClientOptions http-client-options max-websocket-frame-size] (.setMaxWebsocketFrameSize http-client-options max-websocket-frame-size))
(defn get-max-websocket-frame-size [^HttpClientOptions http-client-options] (.getMaxWebsocketFrameSize http-client-options))
(defn set-max-websocket-message-size [^HttpClientOptions http-client-options max-websocket-message-size] (.setMaxWebsocketMessageSize http-client-options max-websocket-message-size))
(defn get-max-websocket-message-size [^HttpClientOptions http-client-options] (.getMaxWebsocketMessageSize http-client-options))
(defn set-metrics-name [^HttpClientOptions http-client-options metrics-name] (.setMetricsName http-client-options metrics-name))
(defn get-metrics-name [^HttpClientOptions http-client-options] (.getMetricsName http-client-options))
(defn set-open-ssl-engine-options [^HttpClientOptions http-client-options open-ssl-engine-options] (.setOpenSslEngineOptions http-client-options open-ssl-engine-options))
(defn get-open-ssl-engine-options [^HttpClientOptions http-client-options] (.getOpenSslEngineOptions http-client-options))
(defn set-pem-key-cert-options [^HttpClientOptions http-client-options pem-key-cert-options] (.setPemKeyCertOptions http-client-options pem-key-cert-options))
(defn get-pem-key-cert-options [^HttpClientOptions http-client-options] (.getPemKeyCertOptions http-client-options))
(defn set-pem-trust-options [^HttpClientOptions http-client-options pem-trust-options] (.setPemTrustOptions http-client-options pem-trust-options))
(defn get-pem-trust-options [^HttpClientOptions http-client-options] (.getPemTrustOptions http-client-options))
(defn set-pfx-key-cert-options [^HttpClientOptions http-client-options pfx-key-cert-options] (.setPfxKeyCertOptions http-client-options pfx-key-cert-options))
(defn get-pfx-key-cert-options [^HttpClientOptions http-client-options] (.getPfxKeyCertOptions http-client-options))
(defn set-pfx-trust-options [^HttpClientOptions http-client-options pfx-trust-options] (.setPfxTrustOptions http-client-options pfx-trust-options))
(defn get-pfx-trust-options [^HttpClientOptions http-client-options] (.getPfxTrustOptions http-client-options))
(defn set-pipelining [^HttpClientOptions http-client-options pipelining] (.setPipelining http-client-options pipelining))
(defn is-pipelining [^HttpClientOptions http-client-options] (.isPipelining http-client-options))
(defn set-pipelining-limit [^HttpClientOptions http-client-options pipelining-limit] (.setPipeliningLimit http-client-options pipelining-limit))
(defn get-pipelining-limit [^HttpClientOptions http-client-options] (.getPipeliningLimit http-client-options))
(defn set-pool-cleaner-period [^HttpClientOptions http-client-options pool-cleaner-period] (.setPoolCleanerPeriod http-client-options pool-cleaner-period))
(defn get-pool-cleaner-period [^HttpClientOptions http-client-options] (.getPoolCleanerPeriod http-client-options))
(defn set-protocol-version [^HttpClientOptions http-client-options protocol-version] (.setProtocolVersion http-client-options protocol-version))
(defn get-protocol-version [^HttpClientOptions http-client-options] (.getProtocolVersion http-client-options))
(defn set-proxy-options [^HttpClientOptions http-client-options proxy-options] (.setProxyOptions http-client-options proxy-options))
(defn get-proxy-options [^HttpClientOptions http-client-options] (.getProxyOptions http-client-options))
(defn set-receive-buffer-size [^HttpClientOptions http-client-options receive-buffer-size] (.setReceiveBufferSize http-client-options receive-buffer-size))
(defn get-receive-buffer-size [^HttpClientOptions http-client-options] (.getReceiveBufferSize http-client-options))
(defn set-reuse-address [^HttpClientOptions http-client-options reuse-address] (.setReuseAddress http-client-options reuse-address))
(defn is-reuse-address [^HttpClientOptions http-client-options] (.isReuseAddress http-client-options))
(defn set-reuse-port [^HttpClientOptions http-client-options reuse-port] (.setReusePort http-client-options reuse-port))
(defn is-reuse-port [^HttpClientOptions http-client-options] (.isReusePort http-client-options))
(defn set-send-buffer-size [^HttpClientOptions http-client-options send-buffer-size] (.setSendBufferSize http-client-options send-buffer-size))
(defn get-send-buffer-size [^HttpClientOptions http-client-options] (.getSendBufferSize http-client-options))
(defn set-send-unmasked-frames [^HttpClientOptions http-client-options send-unmasked-frames] (.setSendUnmaskedFrames http-client-options send-unmasked-frames))
(defn is-send-unmasked-frames [^HttpClientOptions http-client-options] (.isSendUnmaskedFrames http-client-options))
(defn set-so-linger [^HttpClientOptions http-client-options so-linger] (.setSoLinger http-client-options so-linger))
(defn get-so-linger [^HttpClientOptions http-client-options] (.getSoLinger http-client-options))
(defn set-ssl [^HttpClientOptions http-client-options ssl] (.setSsl http-client-options ssl))
(defn is-ssl [^HttpClientOptions http-client-options] (.isSsl http-client-options))
(defn set-ssl-handshake-timeout [^HttpClientOptions http-client-options ssl-handshake-timeout] (.setSslHandshakeTimeout http-client-options ssl-handshake-timeout))
(defn get-ssl-handshake-timeout [^HttpClientOptions http-client-options] (.getSslHandshakeTimeout http-client-options))
(defn set-ssl-handshake-timeout-unit [^HttpClientOptions http-client-options ssl-handshake-timeout-unit] (.setSslHandshakeTimeoutUnit http-client-options ssl-handshake-timeout-unit))
(defn get-ssl-handshake-timeout-unit [^HttpClientOptions http-client-options] (.getSslHandshakeTimeoutUnit http-client-options))
(defn set-tcp-cork [^HttpClientOptions http-client-options tcp-cork] (.setTcpCork http-client-options tcp-cork))
(defn is-tcp-cork [^HttpClientOptions http-client-options] (.isTcpCork http-client-options))
(defn set-tcp-fast-open [^HttpClientOptions http-client-options tcp-fast-open] (.setTcpFastOpen http-client-options tcp-fast-open))
(defn is-tcp-fast-open [^HttpClientOptions http-client-options] (.isTcpFastOpen http-client-options))
(defn set-tcp-keep-alive [^HttpClientOptions http-client-options tcp-keep-alive] (.setTcpKeepAlive http-client-options tcp-keep-alive))
(defn is-tcp-keep-alive [^HttpClientOptions http-client-options] (.isTcpKeepAlive http-client-options))
(defn set-tcp-no-delay [^HttpClientOptions http-client-options tcp-no-delay] (.setTcpNoDelay http-client-options tcp-no-delay))
(defn is-tcp-no-delay [^HttpClientOptions http-client-options] (.isTcpNoDelay http-client-options))
(defn set-tcp-quick-ack [^HttpClientOptions http-client-options tcp-quick-ack] (.setTcpQuickAck http-client-options tcp-quick-ack))
(defn is-tcp-quick-ack [^HttpClientOptions http-client-options] (.isTcpQuickAck http-client-options))
(defn set-traffic-class [^HttpClientOptions http-client-options traffic-class] (.setTrafficClass http-client-options traffic-class))
(defn get-traffic-class [^HttpClientOptions http-client-options] (.getTrafficClass http-client-options))
(defn set-trust-all [^HttpClientOptions http-client-options trust-all] (.setTrustAll http-client-options trust-all))
(defn is-trust-all [^HttpClientOptions http-client-options] (.isTrustAll http-client-options))
(defn set-trust-store-options [^HttpClientOptions http-client-options trust-store-options] (.setTrustStoreOptions http-client-options trust-store-options))
(defn get-trust-store-options [^HttpClientOptions http-client-options] (.getTrustStoreOptions http-client-options))
(defn set-try-use-compression [^HttpClientOptions http-client-options try-use-compression] (.setTryUseCompression http-client-options try-use-compression))
(defn is-try-use-compression [^HttpClientOptions http-client-options] (.isTryUseCompression http-client-options))
(defn set-try-use-per-frame-websocket-compression [^HttpClientOptions http-client-options try-use-per-frame-websocket-compression] (.setTryUsePerFrameWebsocketCompression http-client-options try-use-per-frame-websocket-compression))
(defn set-try-use-per-message-websocket-compression [^HttpClientOptions http-client-options try-use-per-message-websocket-compression] (.setTryUsePerMessageWebsocketCompression http-client-options try-use-per-message-websocket-compression))
(defn get-try-use-per-message-websocket-compression [^HttpClientOptions http-client-options] (.getTryUsePerMessageWebsocketCompression http-client-options))
(defn get-try-websocket-deflate-frame-compression [^HttpClientOptions http-client-options] (.getTryWebsocketDeflateFrameCompression http-client-options))
(defn set-use-alpn [^HttpClientOptions http-client-options use-alpn] (.setUseAlpn http-client-options use-alpn))
(defn is-use-alpn [^HttpClientOptions http-client-options] (.isUseAlpn http-client-options))
(defn set-verify-host [^HttpClientOptions http-client-options verify-host] (.setVerifyHost http-client-options verify-host))
(defn is-verify-host [^HttpClientOptions http-client-options] (.isVerifyHost http-client-options))
(defn set-websocket-compression-allow-client-no-context [^HttpClientOptions http-client-options websocket-compression-allow-client-no-context] (.setWebsocketCompressionAllowClientNoContext http-client-options websocket-compression-allow-client-no-context))
(defn get-websocket-compression-allow-client-no-context [^HttpClientOptions http-client-options] (.getWebsocketCompressionAllowClientNoContext http-client-options))
(defn set-websocket-compression-level [^HttpClientOptions http-client-options websocket-compression-level] (.setWebsocketCompressionLevel http-client-options websocket-compression-level))
(defn get-websocket-compression-level [^HttpClientOptions http-client-options] (.getWebsocketCompressionLevel http-client-options))
(defn set-websocket-compression-request-server-no-context [^HttpClientOptions http-client-options websocket-compression-request-server-no-context] (.setWebsocketCompressionRequestServerNoContext http-client-options websocket-compression-request-server-no-context))
(defn get-websocket-compression-request-server-no-context [^HttpClientOptions http-client-options] (.getWebsocketCompressionRequestServerNoContext http-client-options))
(defn to-json [^HttpClientOptions http-client-options] (.toJson http-client-options))