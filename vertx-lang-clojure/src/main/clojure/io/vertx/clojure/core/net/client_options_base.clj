(ns io.vertx.clojure.core.net.client-options-base)

(import io.vertx.core.net.ClientOptionsBase)
(import io.vertx.core.json.JsonObject)

(defn new-instance
  ([] (new ClientOptionsBase))
  ([^JsonObject json] (new ClientOptionsBase json)))

(defn set-connect-timeout [^ClientOptionsBase client-options-base connect-timeout] (.setConnectTimeout client-options-base connect-timeout))
(defn get-connect-timeout [^ClientOptionsBase client-options-base] (.getConnectTimeout client-options-base))
(defn add-crl-path [^ClientOptionsBase client-options-base crl-paths] (.addCrlPath client-options-base crl-paths))
(defn get-crl-paths [^ClientOptionsBase client-options-base] (.getCrlPaths client-options-base))
(defn add-crl-value [^ClientOptionsBase client-options-base crl-values] (.addCrlValue client-options-base crl-values))
(defn get-crl-values [^ClientOptionsBase client-options-base] (.getCrlValues client-options-base))
(defn add-enabled-cipher-suite [^ClientOptionsBase client-options-base enabled-cipher-suites] (.addEnabledCipherSuite client-options-base enabled-cipher-suites))
(defn get-enabled-cipher-suites [^ClientOptionsBase client-options-base] (.getEnabledCipherSuites client-options-base))
(defn add-enabled-secure-transport-protocol [^ClientOptionsBase client-options-base enabled-secure-transport-protocols] (.addEnabledSecureTransportProtocol client-options-base enabled-secure-transport-protocols))
(defn set-enabled-secure-transport-protocols [^ClientOptionsBase client-options-base enabled-secure-transport-protocols] (.setEnabledSecureTransportProtocols client-options-base enabled-secure-transport-protocols))
(defn get-enabled-secure-transport-protocols [^ClientOptionsBase client-options-base] (.getEnabledSecureTransportProtocols client-options-base))
(defn set-idle-timeout [^ClientOptionsBase client-options-base idle-timeout] (.setIdleTimeout client-options-base idle-timeout))
(defn get-idle-timeout [^ClientOptionsBase client-options-base] (.getIdleTimeout client-options-base))
(defn set-idle-timeout-unit [^ClientOptionsBase client-options-base idle-timeout-unit] (.setIdleTimeoutUnit client-options-base idle-timeout-unit))
(defn get-idle-timeout-unit [^ClientOptionsBase client-options-base] (.getIdleTimeoutUnit client-options-base))
(defn set-jdk-ssl-engine-options [^ClientOptionsBase client-options-base jdk-ssl-engine-options] (.setJdkSslEngineOptions client-options-base jdk-ssl-engine-options))
(defn get-jdk-ssl-engine-options [^ClientOptionsBase client-options-base] (.getJdkSslEngineOptions client-options-base))
(defn set-key-store-options [^ClientOptionsBase client-options-base key-store-options] (.setKeyStoreOptions client-options-base key-store-options))
(defn get-key-store-options [^ClientOptionsBase client-options-base] (.getKeyStoreOptions client-options-base))
(defn set-local-address [^ClientOptionsBase client-options-base local-address] (.setLocalAddress client-options-base local-address))
(defn get-local-address [^ClientOptionsBase client-options-base] (.getLocalAddress client-options-base))
(defn set-log-activity [^ClientOptionsBase client-options-base log-activity] (.setLogActivity client-options-base log-activity))
(defn get-log-activity [^ClientOptionsBase client-options-base] (.getLogActivity client-options-base))
(defn set-metrics-name [^ClientOptionsBase client-options-base metrics-name] (.setMetricsName client-options-base metrics-name))
(defn get-metrics-name [^ClientOptionsBase client-options-base] (.getMetricsName client-options-base))
(defn set-open-ssl-engine-options [^ClientOptionsBase client-options-base open-ssl-engine-options] (.setOpenSslEngineOptions client-options-base open-ssl-engine-options))
(defn get-open-ssl-engine-options [^ClientOptionsBase client-options-base] (.getOpenSslEngineOptions client-options-base))
(defn set-pem-key-cert-options [^ClientOptionsBase client-options-base pem-key-cert-options] (.setPemKeyCertOptions client-options-base pem-key-cert-options))
(defn get-pem-key-cert-options [^ClientOptionsBase client-options-base] (.getPemKeyCertOptions client-options-base))
(defn set-pem-trust-options [^ClientOptionsBase client-options-base pem-trust-options] (.setPemTrustOptions client-options-base pem-trust-options))
(defn get-pem-trust-options [^ClientOptionsBase client-options-base] (.getPemTrustOptions client-options-base))
(defn set-pfx-key-cert-options [^ClientOptionsBase client-options-base pfx-key-cert-options] (.setPfxKeyCertOptions client-options-base pfx-key-cert-options))
(defn get-pfx-key-cert-options [^ClientOptionsBase client-options-base] (.getPfxKeyCertOptions client-options-base))
(defn set-pfx-trust-options [^ClientOptionsBase client-options-base pfx-trust-options] (.setPfxTrustOptions client-options-base pfx-trust-options))
(defn get-pfx-trust-options [^ClientOptionsBase client-options-base] (.getPfxTrustOptions client-options-base))
(defn set-proxy-options [^ClientOptionsBase client-options-base proxy-options] (.setProxyOptions client-options-base proxy-options))
(defn get-proxy-options [^ClientOptionsBase client-options-base] (.getProxyOptions client-options-base))
(defn set-receive-buffer-size [^ClientOptionsBase client-options-base receive-buffer-size] (.setReceiveBufferSize client-options-base receive-buffer-size))
(defn get-receive-buffer-size [^ClientOptionsBase client-options-base] (.getReceiveBufferSize client-options-base))
(defn set-reuse-address [^ClientOptionsBase client-options-base reuse-address] (.setReuseAddress client-options-base reuse-address))
(defn is-reuse-address [^ClientOptionsBase client-options-base] (.isReuseAddress client-options-base))
(defn set-reuse-port [^ClientOptionsBase client-options-base reuse-port] (.setReusePort client-options-base reuse-port))
(defn is-reuse-port [^ClientOptionsBase client-options-base] (.isReusePort client-options-base))
(defn set-send-buffer-size [^ClientOptionsBase client-options-base send-buffer-size] (.setSendBufferSize client-options-base send-buffer-size))
(defn get-send-buffer-size [^ClientOptionsBase client-options-base] (.getSendBufferSize client-options-base))
(defn set-so-linger [^ClientOptionsBase client-options-base so-linger] (.setSoLinger client-options-base so-linger))
(defn get-so-linger [^ClientOptionsBase client-options-base] (.getSoLinger client-options-base))
(defn set-ssl [^ClientOptionsBase client-options-base ssl] (.setSsl client-options-base ssl))
(defn is-ssl [^ClientOptionsBase client-options-base] (.isSsl client-options-base))
(defn set-tcp-cork [^ClientOptionsBase client-options-base tcp-cork] (.setTcpCork client-options-base tcp-cork))
(defn is-tcp-cork [^ClientOptionsBase client-options-base] (.isTcpCork client-options-base))
(defn set-tcp-fast-open [^ClientOptionsBase client-options-base tcp-fast-open] (.setTcpFastOpen client-options-base tcp-fast-open))
(defn is-tcp-fast-open [^ClientOptionsBase client-options-base] (.isTcpFastOpen client-options-base))
(defn set-tcp-keep-alive [^ClientOptionsBase client-options-base tcp-keep-alive] (.setTcpKeepAlive client-options-base tcp-keep-alive))
(defn is-tcp-keep-alive [^ClientOptionsBase client-options-base] (.isTcpKeepAlive client-options-base))
(defn set-tcp-no-delay [^ClientOptionsBase client-options-base tcp-no-delay] (.setTcpNoDelay client-options-base tcp-no-delay))
(defn is-tcp-no-delay [^ClientOptionsBase client-options-base] (.isTcpNoDelay client-options-base))
(defn set-tcp-quick-ack [^ClientOptionsBase client-options-base tcp-quick-ack] (.setTcpQuickAck client-options-base tcp-quick-ack))
(defn is-tcp-quick-ack [^ClientOptionsBase client-options-base] (.isTcpQuickAck client-options-base))
(defn set-traffic-class [^ClientOptionsBase client-options-base traffic-class] (.setTrafficClass client-options-base traffic-class))
(defn get-traffic-class [^ClientOptionsBase client-options-base] (.getTrafficClass client-options-base))
(defn set-trust-all [^ClientOptionsBase client-options-base trust-all] (.setTrustAll client-options-base trust-all))
(defn is-trust-all [^ClientOptionsBase client-options-base] (.isTrustAll client-options-base))
(defn set-trust-store-options [^ClientOptionsBase client-options-base trust-store-options] (.setTrustStoreOptions client-options-base trust-store-options))
(defn get-trust-store-options [^ClientOptionsBase client-options-base] (.getTrustStoreOptions client-options-base))
(defn set-use-alpn [^ClientOptionsBase client-options-base use-alpn] (.setUseAlpn client-options-base use-alpn))
(defn is-use-alpn [^ClientOptionsBase client-options-base] (.isUseAlpn client-options-base))
(defn set-use-pooled-buffers [^ClientOptionsBase client-options-base use-pooled-buffers] (.setUsePooledBuffers client-options-base use-pooled-buffers))
(defn is-use-pooled-buffers [^ClientOptionsBase client-options-base] (.isUsePooledBuffers client-options-base))
(defn to-json [^ClientOptionsBase client-options-base] (.toJson client-options-base))