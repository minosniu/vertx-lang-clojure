(ns io.vertx.clojure.core.eventbus.event-bus-options)

(import io.vertx.core.eventbus.EventBusOptions)
(import io.vertx.core.json.JsonObject)

(defn new-instance
  ([] (new EventBusOptions))
  ([^JsonObject json] (new EventBusOptions json)))

(defn set-accept-backlog [^EventBusOptions event-bus-options accept-backlog] (.setAcceptBacklog event-bus-options accept-backlog))
(defn get-accept-backlog [^EventBusOptions event-bus-options] (.getAcceptBacklog event-bus-options))
(defn set-client-auth [^EventBusOptions event-bus-options client-auth] (.setClientAuth event-bus-options client-auth))
(defn get-client-auth [^EventBusOptions event-bus-options] (.getClientAuth event-bus-options))
(defn set-cluster-ping-interval [^EventBusOptions event-bus-options cluster-ping-interval] (.setClusterPingInterval event-bus-options cluster-ping-interval))
(defn get-cluster-ping-interval [^EventBusOptions event-bus-options] (.getClusterPingInterval event-bus-options))
(defn set-cluster-ping-reply-interval [^EventBusOptions event-bus-options cluster-ping-reply-interval] (.setClusterPingReplyInterval event-bus-options cluster-ping-reply-interval))
(defn get-cluster-ping-reply-interval [^EventBusOptions event-bus-options] (.getClusterPingReplyInterval event-bus-options))
(defn set-cluster-public-host [^EventBusOptions event-bus-options cluster-public-host] (.setClusterPublicHost event-bus-options cluster-public-host))
(defn get-cluster-public-host [^EventBusOptions event-bus-options] (.getClusterPublicHost event-bus-options))
(defn set-cluster-public-port [^EventBusOptions event-bus-options cluster-public-port] (.setClusterPublicPort event-bus-options cluster-public-port))
(defn get-cluster-public-port [^EventBusOptions event-bus-options] (.getClusterPublicPort event-bus-options))
(defn set-clustered [^EventBusOptions event-bus-options clustered] (.setClustered event-bus-options clustered))
(defn is-clustered [^EventBusOptions event-bus-options] (.isClustered event-bus-options))
(defn set-connect-timeout [^EventBusOptions event-bus-options connect-timeout] (.setConnectTimeout event-bus-options connect-timeout))
(defn get-connect-timeout [^EventBusOptions event-bus-options] (.getConnectTimeout event-bus-options))
(defn add-crl-path [^EventBusOptions event-bus-options crl-paths] (.addCrlPath event-bus-options crl-paths))
(defn get-crl-paths [^EventBusOptions event-bus-options] (.getCrlPaths event-bus-options))
(defn add-crl-value [^EventBusOptions event-bus-options crl-values] (.addCrlValue event-bus-options crl-values))
(defn get-crl-values [^EventBusOptions event-bus-options] (.getCrlValues event-bus-options))
(defn add-enabled-cipher-suite [^EventBusOptions event-bus-options enabled-cipher-suites] (.addEnabledCipherSuite event-bus-options enabled-cipher-suites))
(defn get-enabled-cipher-suites [^EventBusOptions event-bus-options] (.getEnabledCipherSuites event-bus-options))
(defn add-enabled-secure-transport-protocol [^EventBusOptions event-bus-options enabled-secure-transport-protocols] (.addEnabledSecureTransportProtocol event-bus-options enabled-secure-transport-protocols))
(defn set-enabled-secure-transport-protocols [^EventBusOptions event-bus-options enabled-secure-transport-protocols] (.setEnabledSecureTransportProtocols event-bus-options enabled-secure-transport-protocols))
(defn get-enabled-secure-transport-protocols [^EventBusOptions event-bus-options] (.getEnabledSecureTransportProtocols event-bus-options))
(defn set-host [^EventBusOptions event-bus-options host] (.setHost event-bus-options host))
(defn get-host [^EventBusOptions event-bus-options] (.getHost event-bus-options))
(defn set-idle-timeout [^EventBusOptions event-bus-options idle-timeout] (.setIdleTimeout event-bus-options idle-timeout))
(defn get-idle-timeout [^EventBusOptions event-bus-options] (.getIdleTimeout event-bus-options))
(defn set-idle-timeout-unit [^EventBusOptions event-bus-options idle-timeout-unit] (.setIdleTimeoutUnit event-bus-options idle-timeout-unit))
(defn get-idle-timeout-unit [^EventBusOptions event-bus-options] (.getIdleTimeoutUnit event-bus-options))
(defn set-jdk-ssl-engine-options [^EventBusOptions event-bus-options jdk-ssl-engine-options] (.setJdkSslEngineOptions event-bus-options jdk-ssl-engine-options))
(defn get-jdk-ssl-engine-options [^EventBusOptions event-bus-options] (.getJdkSslEngineOptions event-bus-options))
(defn set-key-store-options [^EventBusOptions event-bus-options key-store-options] (.setKeyStoreOptions event-bus-options key-store-options))
(defn get-key-store-options [^EventBusOptions event-bus-options] (.getKeyStoreOptions event-bus-options))
(defn set-log-activity [^EventBusOptions event-bus-options log-activity] (.setLogActivity event-bus-options log-activity))
(defn get-log-activity [^EventBusOptions event-bus-options] (.getLogActivity event-bus-options))
(defn set-open-ssl-engine-options [^EventBusOptions event-bus-options open-ssl-engine-options] (.setOpenSslEngineOptions event-bus-options open-ssl-engine-options))
(defn get-open-ssl-engine-options [^EventBusOptions event-bus-options] (.getOpenSslEngineOptions event-bus-options))
(defn set-pem-key-cert-options [^EventBusOptions event-bus-options pem-key-cert-options] (.setPemKeyCertOptions event-bus-options pem-key-cert-options))
(defn get-pem-key-cert-options [^EventBusOptions event-bus-options] (.getPemKeyCertOptions event-bus-options))
(defn set-pem-trust-options [^EventBusOptions event-bus-options pem-trust-options] (.setPemTrustOptions event-bus-options pem-trust-options))
(defn get-pem-trust-options [^EventBusOptions event-bus-options] (.getPemTrustOptions event-bus-options))
(defn set-pfx-key-cert-options [^EventBusOptions event-bus-options pfx-key-cert-options] (.setPfxKeyCertOptions event-bus-options pfx-key-cert-options))
(defn get-pfx-key-cert-options [^EventBusOptions event-bus-options] (.getPfxKeyCertOptions event-bus-options))
(defn set-pfx-trust-options [^EventBusOptions event-bus-options pfx-trust-options] (.setPfxTrustOptions event-bus-options pfx-trust-options))
(defn get-pfx-trust-options [^EventBusOptions event-bus-options] (.getPfxTrustOptions event-bus-options))
(defn set-port [^EventBusOptions event-bus-options port] (.setPort event-bus-options port))
(defn get-port [^EventBusOptions event-bus-options] (.getPort event-bus-options))
(defn set-receive-buffer-size [^EventBusOptions event-bus-options receive-buffer-size] (.setReceiveBufferSize event-bus-options receive-buffer-size))
(defn get-receive-buffer-size [^EventBusOptions event-bus-options] (.getReceiveBufferSize event-bus-options))
(defn set-reconnect-attempts [^EventBusOptions event-bus-options reconnect-attempts] (.setReconnectAttempts event-bus-options reconnect-attempts))
(defn get-reconnect-attempts [^EventBusOptions event-bus-options] (.getReconnectAttempts event-bus-options))
(defn set-reconnect-interval [^EventBusOptions event-bus-options reconnect-interval] (.setReconnectInterval event-bus-options reconnect-interval))
(defn get-reconnect-interval [^EventBusOptions event-bus-options] (.getReconnectInterval event-bus-options))
(defn set-reuse-address [^EventBusOptions event-bus-options reuse-address] (.setReuseAddress event-bus-options reuse-address))
(defn is-reuse-address [^EventBusOptions event-bus-options] (.isReuseAddress event-bus-options))
(defn set-reuse-port [^EventBusOptions event-bus-options reuse-port] (.setReusePort event-bus-options reuse-port))
(defn is-reuse-port [^EventBusOptions event-bus-options] (.isReusePort event-bus-options))
(defn set-send-buffer-size [^EventBusOptions event-bus-options send-buffer-size] (.setSendBufferSize event-bus-options send-buffer-size))
(defn get-send-buffer-size [^EventBusOptions event-bus-options] (.getSendBufferSize event-bus-options))
(defn set-so-linger [^EventBusOptions event-bus-options so-linger] (.setSoLinger event-bus-options so-linger))
(defn get-so-linger [^EventBusOptions event-bus-options] (.getSoLinger event-bus-options))
(defn set-ssl [^EventBusOptions event-bus-options ssl] (.setSsl event-bus-options ssl))
(defn is-ssl [^EventBusOptions event-bus-options] (.isSsl event-bus-options))
(defn set-ssl-handshake-timeout [^EventBusOptions event-bus-options ssl-handshake-timeout] (.setSslHandshakeTimeout event-bus-options ssl-handshake-timeout))
(defn get-ssl-handshake-timeout [^EventBusOptions event-bus-options] (.getSslHandshakeTimeout event-bus-options))
(defn set-ssl-handshake-timeout-unit [^EventBusOptions event-bus-options ssl-handshake-timeout-unit] (.setSslHandshakeTimeoutUnit event-bus-options ssl-handshake-timeout-unit))
(defn get-ssl-handshake-timeout-unit [^EventBusOptions event-bus-options] (.getSslHandshakeTimeoutUnit event-bus-options))
(defn set-tcp-cork [^EventBusOptions event-bus-options tcp-cork] (.setTcpCork event-bus-options tcp-cork))
(defn is-tcp-cork [^EventBusOptions event-bus-options] (.isTcpCork event-bus-options))
(defn set-tcp-fast-open [^EventBusOptions event-bus-options tcp-fast-open] (.setTcpFastOpen event-bus-options tcp-fast-open))
(defn is-tcp-fast-open [^EventBusOptions event-bus-options] (.isTcpFastOpen event-bus-options))
(defn set-tcp-keep-alive [^EventBusOptions event-bus-options tcp-keep-alive] (.setTcpKeepAlive event-bus-options tcp-keep-alive))
(defn is-tcp-keep-alive [^EventBusOptions event-bus-options] (.isTcpKeepAlive event-bus-options))
(defn set-tcp-no-delay [^EventBusOptions event-bus-options tcp-no-delay] (.setTcpNoDelay event-bus-options tcp-no-delay))
(defn is-tcp-no-delay [^EventBusOptions event-bus-options] (.isTcpNoDelay event-bus-options))
(defn set-tcp-quick-ack [^EventBusOptions event-bus-options tcp-quick-ack] (.setTcpQuickAck event-bus-options tcp-quick-ack))
(defn is-tcp-quick-ack [^EventBusOptions event-bus-options] (.isTcpQuickAck event-bus-options))
(defn set-traffic-class [^EventBusOptions event-bus-options traffic-class] (.setTrafficClass event-bus-options traffic-class))
(defn get-traffic-class [^EventBusOptions event-bus-options] (.getTrafficClass event-bus-options))
(defn set-trust-all [^EventBusOptions event-bus-options trust-all] (.setTrustAll event-bus-options trust-all))
(defn is-trust-all [^EventBusOptions event-bus-options] (.isTrustAll event-bus-options))
(defn set-trust-store-options [^EventBusOptions event-bus-options trust-store-options] (.setTrustStoreOptions event-bus-options trust-store-options))
(defn get-trust-store-options [^EventBusOptions event-bus-options] (.getTrustStoreOptions event-bus-options))
(defn set-use-alpn [^EventBusOptions event-bus-options use-alpn] (.setUseAlpn event-bus-options use-alpn))
(defn is-use-alpn [^EventBusOptions event-bus-options] (.isUseAlpn event-bus-options))
(defn to-json [^EventBusOptions event-bus-options] (.toJson event-bus-options))